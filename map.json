{ "routines" : [ { "name" : "", "candidates" : [ "(*@elems)" ], "file" : "SETTING::src/core/Hash.pm", "type" : "Sub" }, { "name" : "DON'T_DIVIDE_NUMBERS", "candidates" : [ "(Int:D \\nu, Int:D \\de, $t1, $t2)" ], "file" : "SETTING::src/core/Rat.pm", "type" : "Sub" }, { "name" : "abs", "candidates" : [ "(\\a)", "(Real \\a)", "(Int:D \\a --> Int:D)", "(int $a --> int)", "(Num:D \\a)", "(num $a --> num)", "(Complex:D \\a --> Num:D)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "acos", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "acosec", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(Num:D \\x)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "acosech", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "acosh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "acotan", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "acotanh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "all", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "any", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "append", "candidates" : [ "(\\a, |elems is raw)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "asec", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "asech", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "asin", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "asinh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "atan", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "atan2", "candidates" : [ "(Real \\a, Real \\b = 1e0)", "(\\a, \\b = 1e0)", "(Num:D $a, Num:D $b = 1e0)" ], "file" : "SETTING::src/core/Real.pm", "type" : "Sub" }, { "name" : "atanh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "await", "candidates" : [ "()", "(Any:U $x)", "(Any:D $x)", "(Iterable:D $i)", "(Promise:D $p)", "(Channel:D $c)", "(Supply:D $s)", "(*@awaitables)" ], "file" : "SETTING::src/core/asyncops.pm", "type" : "Sub" }, { "name" : "awaiterator", "candidates" : [ "(@promises)" ], "file" : "SETTING::src/core/asyncops.pm", "type" : "Sub" }, { "name" : "bag", "candidates" : [ "(*@a --> Bag)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bag]}" }, { "name" : "cache", "candidates" : [ "(+)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "callframe", "candidates" : [ "(Int $level = 0)" ], "file" : "SETTING::src/core/CallFrame.pm", "type" : "Sub" }, { "name" : "callsame", "candidates" : [ "()" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "callwith", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "cas", "candidates" : [ "(\\val, &code)" ], "file" : "SETTING::src/core/asyncops.pm", "type" : "Sub" }, { "name" : "categorize", "candidates" : [ "($test, + is raw, *%named)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "ceiling", "candidates" : [ "($a)", "(Numeric $a)", "(num $a --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "chars", "candidates" : [ "(Cool $x)", "(Str:D $x)", "(str $x --> int)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "chdir", "candidates" : [ "($path, :$test = \"r\")" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "chmod", "candidates" : [ "($mode, *@filenames, :$SPEC = { ... }, :$CWD = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "chomp", "candidates" : [ "(Cool:D $s --> Str)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub+{Callable[Str]}" }, { "name" : "chop", "candidates" : [ "(Cool:D $s --> Str)", "(Cool:D $s, $n --> Str)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "chr", "candidates" : [ "(Int:D \\x --> Str:D)", "(Cool \\x --> Str:D)", "(int $x --> str)" ], "file" : "SETTING::src/core/Int.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "chrs", "candidates" : [ "(*@c --> Str:D)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub+{Callable[Str:D]}" }, { "name" : "circumfix:<[ ]>", "candidates" : [ "()", "(Iterable:D \\iterable)", "(Mu \\x)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "circumfix:<{ }>", "candidates" : [ "(*@elems)" ], "file" : "SETTING::src/core/Hash.pm", "type" : "Sub" }, { "name" : "cis", "candidates" : [ "(Real $a)" ], "file" : "SETTING::src/core/Real.pm", "type" : "Sub" }, { "name" : "classify", "candidates" : [ "($test, + is raw, *%named)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "close", "candidates" : [ "($fh)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "comb", "candidates" : [ "(Regex $matcher, Cool $input, $limit = *)", "(Str $matcher, Cool $input, $limit = *)", "(Int:D $matcher, Cool $input, $limit = *)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "combinations", "candidates" : [ "($n, $k)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "copy", "candidates" : [ "($from, $to, :$SPEC = { ... }, :$CWD = { ... }, :$createonly)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "cos", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "cosec", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(Num:D \\x)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "cosech", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "cosh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "cotan", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "cotanh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "dd", "candidates" : [ "(| is raw)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "deepmap", "candidates" : [ "(\\op, \\obj)", "(\\op, Associative \\h)" ], "file" : "SETTING::src/core/metaops.pm", "type" : "Sub" }, { "name" : "defined", "candidates" : [ "(Mu \\x)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "die", "candidates" : [ "( --> Nil)", "(Exception:U $e --> Nil)", "($payload --> Nil)", "(|cap is raw (*@msg) --> Nil)", "(Failure:D $f --> Nil)", "(Failure:U $f --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "dir", "candidates" : [ "(*%_)", "(IO::Path:D $path, |c is raw)", "(Cool $path, |c is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "done", "candidates" : [ "( --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub+{Callable[Nil]}" }, { "name" : "duckmap", "candidates" : [ "(\\op, \\obj)", "(\\op, Associative \\h)" ], "file" : "SETTING::src/core/metaops.pm", "type" : "Sub" }, { "name" : "elems", "candidates" : [ "($a)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{<anon|51208992>}" }, { "name" : "emit", "candidates" : [ "(\\value --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub+{Callable[Nil]}" }, { "name" : "end", "candidates" : [ "($a)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "exit", "candidates" : [ "($status = 0)" ], "file" : "SETTING::src/core/Rakudo/Internals.pm", "type" : "Sub" }, { "name" : "exp", "candidates" : [ "(Numeric $x)", "(Numeric $x, Numeric $base)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "expmod", "candidates" : [ "(Int:D \\base, Int:D \\exp, Int:D \\mod)", "(\\base, \\exp, \\mod)" ], "file" : "SETTING::src/core/Int.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "fail", "candidates" : [ "( --> Nil)", "(Exception:U $e --> Nil)", "($payload --> Nil)", "(|cap is raw (*@msg) --> Nil)", "(Failure:U $f --> Nil)", "(Failure:D $fail --> Nil)" ], "file" : "SETTING::src/core/Failure.pm", "type" : "Sub" }, { "name" : "fc", "candidates" : [ "(Cool $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "first", "candidates" : [ "(Bool:D $t, | is raw)", "(Mu $test, + is raw, *%a)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "flat", "candidates" : [ "(**@list is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "flip", "candidates" : [ "(Cool $s --> Str)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub+{Callable[Str]}" }, { "name" : "floor", "candidates" : [ "($a)", "(Numeric $a)", "(num $a --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "from-json", "candidates" : [ "($text)" ], "file" : "SETTING::src/core/JSON/Pretty.pm", "type" : "Sub" }, { "name" : "get", "candidates" : [ "($fh = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "getc", "candidates" : [ "($fh = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "gethostname", "candidates" : [ "( --> Str)" ], "file" : "SETTING::src/core/OS.pm", "type" : "Sub+{Callable[Str]}" }, { "name" : "gist", "candidates" : [ "(| is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "goto", "candidates" : [ "(Label:D \\x --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "grep", "candidates" : [ "(Mu $test, + is raw, *%a)", "(Bool:D $t, | is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "hash", "candidates" : [ "(*@a, *%h)" ], "file" : "SETTING::src/core/Hash.pm", "type" : "Sub" }, { "name" : "homedir", "candidates" : [ "($path, :$test = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "index", "candidates" : [ "(Cool $s, $needle, $pos = 0)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "indices", "candidates" : [ "(Cool $s, $needle, $pos = 0, :$overlap)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "indir", "candidates" : [ "($path, $what, :$test = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "infix:<!=>", "candidates" : [ "($?)", "(Mu \\a, Mu \\b)", "(int $a, int $b)", "(num $a, num $b --> Bool)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<!~~>", "candidates" : [ "(Mu \\topic, Mu \\matcher)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub" }, { "name" : "infix:<%%>", "candidates" : [ "()", "($)", "(\\a, \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<%>", "candidates" : [ "()", "($x)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b --> Int)", "(int $a, int $b --> int)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b --> num)", "(Rational \\a, Int \\b)", "(Int \\a, Rational \\b)", "(Rational \\a, Rational \\b)", "(Duration:D $a, Real $b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<&&>", "candidates" : [ "(Mu $x = Bool::True)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<&>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(&)>", "candidates" : [ "(**@p)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(+)>", "candidates" : [ "(**@p)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(-)>", "candidates" : [ "(**@p)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(.)>", "candidates" : [ "(**@p)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(^)>", "candidates" : [ "(**@p)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(cont)>", "candidates" : [ "($a, $b --> Bool)", "(Set $a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(elem)>", "candidates" : [ "($a, $b --> Bool)", "($a, Set $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<(|)>", "candidates" : [ "(**@p)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<**>", "candidates" : [ "($x = 1)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b --> int)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b --> num)", "(Rational \\a, Int \\b)", "(Complex:D \\a, Complex:D \\b --> Complex:D)", "(Real \\a, Complex:D \\b --> Complex:D)", "(Complex:D \\a, Real \\b --> Complex:D)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<*>", "candidates" : [ "($x = 1)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b --> Int)", "(int $a, int $b --> int)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b --> num)", "(Range:D \\a, Real:D \\b)", "(Real:D \\a, Range:D \\b)", "(Rational \\a, Rational \\b)", "(Rational \\a, Int \\b)", "(Int \\a, Rational \\b)", "(Complex:D \\a, Complex:D \\b --> Complex:D)", "(Complex:D \\a, Real \\b --> Complex:D)", "(Real \\a, Complex:D \\b --> Complex:D)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<+&>", "candidates" : [ "()", "($x)", "($x, $y)", "(Int:D \\a, Int:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<+>", "candidates" : [ "($x = 0)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b --> Int:D)", "(int $a, int $b --> int)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b --> num)", "(Range:D \\a, Real:D \\b)", "(Real:D \\a, Range:D \\b)", "(Rational \\a, Rational \\b)", "(Rational \\a, Int \\b)", "(Int \\a, Rational \\b)", "(Complex:D \\a, Complex:D \\b --> Complex:D)", "(Complex:D \\a, Real \\b --> Complex:D)", "(Real \\a, Complex:D \\b --> Complex:D)", "(Instant:D $a, Real:D $b)", "(Real:D $a, Instant:D $b)", "(Instant:D $a, Duration:D $b)", "(Duration:D $a, Instant:D $b)", "(Duration:D $a, Real $b)", "(Real $a, Duration:D $b)", "(Duration:D $a, Duration:D $b)", "(DateTime:D \\a, Duration:D \\b)", "(Duration:D \\a, DateTime:D \\b)", "(Date:D $d, Int:D $x)", "(Int:D $x, Date:D $d)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<+^>", "candidates" : [ "()", "($x)", "($x, $y)", "(Int:D \\a, Int:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<+|>", "candidates" : [ "()", "($x)", "($x, $y)", "(Int:D \\a, Int:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<,>", "candidates" : [ "()", "(| is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<->", "candidates" : [ "($x = 0)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b --> Int:D)", "(int $a, int $b --> int)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b --> num)", "(Range:D \\a, Real:D \\b)", "(Rational \\a, Rational \\b)", "(Rational \\a, Int \\b)", "(Int \\a, Rational \\b)", "(Complex:D \\a, Complex:D \\b --> Complex:D)", "(Complex:D \\a, Real \\b --> Complex:D)", "(Real \\a, Complex:D \\b --> Complex:D)", "(Instant:D $a, Instant:D $b)", "(Instant:D $a, Real:D $b)", "(Duration:D $a, Real $b)", "(Duration:D $a, Duration:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(DateTime:D \\a, Duration:D \\b)", "(Date:D $d, Int:D $x)", "(Date:D $a, Date:D $b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<...>", "candidates" : [ "(\\a, Mu \\b)", "(|lol is raw)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<...^>", "candidates" : [ "(\\a, Mu \\b)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "infix:<..>", "candidates" : [ "($min, $max)" ], "file" : "SETTING::src/core/Range.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<..^>", "candidates" : [ "($min, $max)" ], "file" : "SETTING::src/core/Range.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<//>", "candidates" : [ "(Mu $x = Any)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:</>", "candidates" : [ "()", "($x)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b --> num)", "(Range:D \\a, Real:D \\b)", "(Rational \\a, Rational \\b)", "(Rational \\a, Int \\b)", "(Int \\a, Rational \\b)", "(Int \\a, Int \\b)", "(Complex:D \\a, Complex:D \\b --> Complex:D)", "(Complex:D \\a, Real \\b --> Complex:D)", "(Real \\a, Complex:D \\b --> Complex:D)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<=:=>", "candidates" : [ "($?)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<===>", "candidates" : [ "($?)", "(\\a, \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b)", "(num \\a, num \\b --> Bool)", "(Str:D \\a, Str:D \\b --> Bool)", "(str $a, str $b --> Bool)", "(Rational:D \\a, Rational:D \\b --> Bool)", "(Complex:D \\a, Complex:D \\b --> Bool)", "(IntStr:D $a, IntStr:D $b)", "(RatStr:D $a, RatStr:D $b)", "(NumStr:D $a, NumStr:D $b)", "(ComplexStr:D $a, ComplexStr:D $b)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<==>", "candidates" : [ "($?)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b --> Bool)", "(num $a, num $b --> Bool)", "(Rational:D \\a, Rational:D \\b)", "(Rational:D \\a, Int:D \\b)", "(Int:D \\a, Rational:D \\b)", "(Complex:D \\a, Complex:D \\b --> Bool)", "(Complex:D \\a, Real \\b --> Bool)", "(Real \\a, Complex:D \\b --> Bool)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<=>", "candidates" : [ "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<=~=>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub" }, { "name" : "infix:<?&>", "candidates" : [ "(Mu $x = Bool::True)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<?^>", "candidates" : [ "(Mu $x = Bool::False)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<?|>", "candidates" : [ "(Mu $x = Bool::False)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<X>", "candidates" : [ "(+ is raw, :&with!)", "(+ is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<X>", "candidates" : [ "(+ is raw, :&with!)", "(+ is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<Z>", "candidates" : [ "(+ is raw, :&with!)", "(+ is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<Z>", "candidates" : [ "(+ is raw, :&with!)", "(+ is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<^..>", "candidates" : [ "($min, $max)" ], "file" : "SETTING::src/core/Range.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<^..^>", "candidates" : [ "($min, $max)" ], "file" : "SETTING::src/core/Range.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<^>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<^^>", "candidates" : [ "(Mu $x = Bool::False)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)", "(+)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<after>", "candidates" : [ "($x?)", "(\\a, \\b)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<and>", "candidates" : [ "(Mu $x = Bool::True)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<andthen>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<before>", "candidates" : [ "($?)", "(\\a, \\b)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<but>", "candidates" : [ "(Mu:D \\obj, Mu:U \\rolish)", "(Mu:D \\obj, Mu:U \\rolish, :$value! is raw)", "(Mu:U \\obj, Mu:U \\rolish)", "(Mu \\obj, Mu:D $val)", "(Mu:D \\obj, **@roles)", "(Mu:U \\obj, **@roles)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<cmp>", "candidates" : [ "(\\a, \\b)", "(Real:D \\a, \\b)", "(\\a, Real:D \\b)", "(Real:D \\a, Real:D \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Order:D)", "(str $a, str $b --> Order:D)", "(Range:D \\a, Range:D \\b --> Order:D)", "(Real \\a, Range:D \\b --> Order:D)", "(Range:D \\a, Real \\b --> Order:D)", "(Positional \\a, Range:D \\b --> Order:D)", "(Range:D \\a, Positional \\b --> Order:D)", "(@a, @b)", "(Pair:D \\a, Pair:D \\b)", "(Complex:D \\a, Complex:D \\b --> Order:D)", "(Real \\a, Complex:D \\b --> Order:D)", "(Complex:D \\a, Real \\b --> Order:D)", "(IntStr:D $a, IntStr:D $b)", "(RatStr:D $a, RatStr:D $b)", "(NumStr:D $a, NumStr:D $b)", "(ComplexStr:D $a, ComplexStr:D $b)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)", "(Rational:D \\a, Rational:D \\b)" ], "file" : "SETTING::src/core/Order.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<coll>", "candidates" : [ "(Str:D \\a, Str:D \\b --> Order:D)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<div>", "candidates" : [ "(Int:D \\a, Int:D \\b)", "(int $a, int $b --> int)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<does>", "candidates" : [ "(Mu:D \\obj, Mu:U \\rolish)", "(Mu:D \\obj, Mu:U \\rolish, :$value! is raw)", "(Mu:U \\obj, Mu:U \\role)", "(Mu:D \\obj, **@roles)", "(Mu:U \\obj, **@roles)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<eq>", "candidates" : [ "($x?)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Bool)", "(str $a, str $b --> Bool)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<eqv>", "candidates" : [ "($?)", "(Any:U \\a, Any:U \\b)", "(Any:D \\a, Any:U \\b)", "(Any:U \\a, Any:D \\b)", "(Any:D \\a, Any:D \\b)", "(@a, @b)", "(Stringy:D \\a, Stringy:D \\b)", "(Numeric:D \\a, Numeric:D \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b)", "(Capture:D \\a, Capture:D \\b)", "(Seq:D \\a, Seq:D \\b)", "(Range:D \\a, Range:D \\b)", "(Pair:D \\a, Pair:D \\b)", "(Map:D \\a, Map:D \\b)", "(Parameter:D \\a, Parameter:D \\b)", "(Signature:D \\a, Signature:D \\b)", "(Match:D $a, Match:D $b)", "(IntStr:D $a, IntStr:D $b)", "(RatStr:D $a, RatStr:D $b)", "(NumStr:D $a, NumStr:D $b)", "(ComplexStr:D $a, ComplexStr:D $b)", "(Baggy:D \\a, Baggy:D \\b)", "(Setty:D \\a, Setty:D \\b)", "(Version:D \\a, Version:D \\b)", "(Promise:D \\a, Promise:D \\b)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<gcd>", "candidates" : [ "()", "(Int $x)", "(\\a, \\b)", "(Int:D \\a, Int:D \\b --> Int)", "(int $a, int $b --> int)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<ge>", "candidates" : [ "($x?)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Bool)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<gt>", "candidates" : [ "($x?)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Bool)", "(str $a, str $b --> Bool)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<lcm>", "candidates" : [ "(Int $x = 1)", "(\\a, \\b)", "(Int:D \\a, Int:D \\b --> Int)", "(int $a, int $b --> int)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<le>", "candidates" : [ "($x?)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Bool)", "(str $a, str $b --> Bool)", "(str $a, str $b --> Bool)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<leg>", "candidates" : [ "(\\a, \\b)", "(Str:D \\a, Str:D \\b --> Order:D)", "(str $a, str $b --> Order:D)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<lt>", "candidates" : [ "($x?)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Bool)", "(str $a, str $b --> Bool)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<max>", "candidates" : [ "(Mu:D \\a, Mu:U)", "(Mu:U, Mu:D \\b)", "(Mu:D \\a, Mu:D \\b)", "(+ is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<min>", "candidates" : [ "(Mu:D \\a, Mu:U)", "(Mu:U, Mu:D \\b)", "(Mu:D \\a, Mu:D \\b)", "(+ is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<minmax>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<mod>", "candidates" : [ "(Real $a, Real $b)" ], "file" : "SETTING::src/core/Real.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<ne>", "candidates" : [ "($x?)", "(Mu \\a, Mu \\b)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Bool)", "(str $a, str $b --> Bool)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<notandthen>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<or>", "candidates" : [ "(Mu $x = Bool::False)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<orelse>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<unicmp>", "candidates" : [ "(Str:D \\a, Str:D \\b --> Order:D)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<x>", "candidates" : [ "()", "($x)", "($s, Num:D $n)", "($s, Any:D $n)", "($s, Any:U $n)", "(Str:D $s, Int:D $repetition --> Str:D)", "(str $s, int $repetition --> str)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<xor>", "candidates" : [ "(Mu $x = Bool::False)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)", "(|c is raw)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<xx>", "candidates" : [ "()", "(Mu \\x)", "(&x, $n)", "(&x, Whatever)", "(&x, Int $n)", "(Mu \\x, $n)", "(Mu \\x, Whatever)", "(Mu \\x, Int $n)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<|>", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<||>", "candidates" : [ "(Mu $x = Bool::False)", "(Mu \\a, &b)", "(Mu \\a, Mu \\b)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<~&>", "candidates" : [ "()", "($x)", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Str:D)", "(str $a, str $b --> str)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<~>", "candidates" : [ "($x = \"\")", "(\\a, \\b)", "(Blob:D \\a)", "(Blob:D $a, Blob:D $b)", "(Str:D \\a, Str:D \\b --> Str:D)", "(str $a, str $b --> str)", "(*@args --> Str:D)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<~^>", "candidates" : [ "($x = \"\")", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Str:D)", "(str $a, str $b --> str)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<~|>", "candidates" : [ "($x = \"\")", "(\\a, \\b)", "(Blob:D \\a, Blob:D \\b)", "(Str:D \\a, Str:D \\b --> Str:D)", "(str $a, str $b --> str)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<~~>", "candidates" : [ "(Mu \\topic, Mu \\matcher)", "(Mu \\topic, Regex:D \\matcher)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub+{Precedence}" }, { "name" : "infix:<\u00d7>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:<\u00f7>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:<\u2026>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "infix:<\u2026^>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "infix:<\u2208>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2209>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u220b>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u220c>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2212>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:<\u2216>", "candidates" : [ "(|p is raw)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2218>", "candidates" : [ "()", "(&f)", "(&f, &g --> Block)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "infix:<\u2218>", "candidates" : [ "()", "(&f)", "(&f, &g --> Block)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "infix:<\u2229>", "candidates" : [ "(|p is raw)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u222a>", "candidates" : [ "(|p is raw)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2245>", "candidates" : [ "($?)", "(\\a, \\b, :$tolerance = { ... })", "(Num $ where { ... }, Num $ where { ... })", "(Num $ where { ... }, Num $ where { ... })", "(Complex:D \\a, Complex:D \\b --> Bool)", "(Complex:D \\a, Real \\b --> Bool)", "(Real \\a, Complex:D \\b --> Bool)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub" }, { "name" : "infix:<\u227c>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u227d>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2282>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2283>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2284>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2285>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2286>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2287>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2288>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2289>", "candidates" : [ "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u228d>", "candidates" : [ "(|p is raw)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u228e>", "candidates" : [ "(|p is raw)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:<\u2296>", "candidates" : [ "($a, $b)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab(<)\u00bb", "candidates" : [ "($a, $b --> Bool)", "(Setty $a, Setty $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab(<+)\u00bb", "candidates" : [ "($a, $b --> Bool)", "(QuantHash:U $a, QuantHash:U $b --> Bool::True)", "(QuantHash:U $a, QuantHash:D $b --> Bool::True)", "(QuantHash:D $a, QuantHash:U $b --> Bool)", "(QuantHash:D $a, QuantHash:D $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab(<=)\u00bb", "candidates" : [ "($a, $b --> Bool)", "(Setty $a, Setty $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab(>)\u00bb", "candidates" : [ "($a, $b --> Bool)", "(Setty $a, Setty $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab(>+)\u00bb", "candidates" : [ "(QuantHash:U $a, QuantHash:U $b --> Bool::True)", "(QuantHash:D $a, QuantHash:U $b --> Bool::True)", "(QuantHash:U $a, QuantHash:D $b --> Bool)", "(QuantHash:D $a, QuantHash:D $b --> Bool)", "($a, $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab(>=)\u00bb", "candidates" : [ "($a, $b --> Bool)", "(Setty $a, Setty $b --> Bool)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Bool]}+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab+<\u00bb", "candidates" : [ "()", "($x)", "($x, $y)", "(Int:D \\a, Int:D \\b --> Int:D)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab+>\u00bb", "candidates" : [ "()", "($x)", "($x, $y)", "(Int:D \\a, Int:D \\b --> Int:D)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab<=>\u00bb", "candidates" : [ "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b)", "(num $a, num $b)", "(Rational:D \\a, Rational:D \\b)", "(Rational:D \\a, Int:D \\b)", "(Int:D \\a, Rational:D \\b)", "(Complex:D \\a, Complex:D \\b --> Order:D)", "(Real \\a, Complex:D \\b --> Order:D)", "(Complex:D \\a, Real \\b --> Order:D)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab<=\u00bb", "candidates" : [ "($?)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b --> Bool)", "(num $a, num $b --> Bool)", "(Rational:D \\a, Rational:D \\b)", "(Rational:D \\a, Int:D \\b)", "(Int:D \\a, Rational:D \\b)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab<\u00bb", "candidates" : [ "($?)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b --> Bool)", "(num $a, num $b --> Bool)", "(Rational:D \\a, Rational:D \\b)", "(Rational:D \\a, Int:D \\b)", "(Int:D \\a, Rational:D \\b)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab=>\u00bb", "candidates" : [ "(Mu $key, Mu \\value)" ], "file" : "SETTING::src/core/Pair.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "infix:\u00ab>=\u00bb", "candidates" : [ "($?)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b --> Bool)", "(num $a, num $b --> Bool)", "(Rational:D \\a, Rational:D \\b)", "(Rational:D \\a, Int:D \\b)", "(Int:D \\a, Rational:D \\b)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab>\u00bb", "candidates" : [ "($?)", "(\\a, \\b)", "(Real \\a, Real \\b)", "(Int:D \\a, Int:D \\b)", "(int $a, int $b)", "(Num:D \\a, Num:D \\b --> Bool)", "(num $a, num $b --> Bool)", "(Rational:D \\a, Rational:D \\b)", "(Rational:D \\a, Int:D \\b)", "(Int:D \\a, Rational:D \\b)", "(Instant:D $a, Instant:D $b)", "(DateTime:D \\a, DateTime:D \\b)", "(Date:D $a, Date:D $b)", "(Version:D \\a, Version:D \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "infix:\u00ab~<\u00bb", "candidates" : [ "(Str:D \\a, Int:D \\b --> Str:D)", "(str $a, int $b)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub" }, { "name" : "infix:\u00ab~>\u00bb", "candidates" : [ "(Str:D \\a, Int:D \\b --> Str:D)", "(str $a, int $b)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub" }, { "name" : "is-prime", "candidates" : [ "(Int:D \\i)", "(\\i)" ], "file" : "SETTING::src/core/Int.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "item", "candidates" : [ "(\\x)", "(|c is raw)", "(Mu $a)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "join", "candidates" : [ "($sep = \"\", *@values)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "keys", "candidates" : [ "($x)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "kv", "candidates" : [ "($x)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "last", "candidates" : [ "( --> Nil)", "(Label:D \\x --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "lastcall", "candidates" : [ "( --> Bool::True)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub+{Callable[Bool]}" }, { "name" : "lc", "candidates" : [ "(Cool $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "leave", "candidates" : [ "(| is raw)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "lines", "candidates" : [ "($what = { ... }, $limit = Inf, *%named)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "link", "candidates" : [ "($target, $name, :$SPEC = { ... }, :$CWD = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "list", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "log", "candidates" : [ "(Numeric $x)", "(Numeric $x, Numeric $base)", "(Cool $x)", "(Cool $x, Cool $base)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "log10", "candidates" : [ "(Numeric $x)", "(Cool $x)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "lsb", "candidates" : [ "(Int:D \\i)" ], "file" : "SETTING::src/core/Int.pm", "type" : "Sub" }, { "name" : "make", "candidates" : [ "(Mu \\made)" ], "file" : "SETTING::src/core/Match.pm", "type" : "Sub" }, { "name" : "map", "candidates" : [ "(&code, + is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "max", "candidates" : [ "(+ is raw, :&by = { ... })" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "min", "candidates" : [ "(+ is raw, :&by = { ... })" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "minmax", "candidates" : [ "(+ is raw, :&by = { ... })" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "mix", "candidates" : [ "(*@a --> Mix)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Mix]}" }, { "name" : "mkdir", "candidates" : [ "(Int $mode, *@dirnames, :$SPEC = { ... }, :$CWD = { ... })", "($path, $mode = 511, :$SPEC = { ... }, :$CWD = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "move", "candidates" : [ "($from, $to, :$createonly)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "msb", "candidates" : [ "(Int:D \\i)" ], "file" : "SETTING::src/core/Int.pm", "type" : "Sub" }, { "name" : "next", "candidates" : [ "( --> Nil)", "(Label:D \\x --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "nextcallee", "candidates" : [ "()" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "nextsame", "candidates" : [ "()" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "nextwith", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "nodemap", "candidates" : [ "(\\op, \\obj)", "(\\op, Associative \\h)" ], "file" : "SETTING::src/core/metaops.pm", "type" : "Sub" }, { "name" : "none", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "not", "candidates" : [ "(Mu $x)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub" }, { "name" : "note", "candidates" : [ "()", "(Str:D \\x)", "(**@args is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "one", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/Junction.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "open", "candidates" : [ "($path, :$chomp = Bool::True, :$enc = \"utf8\", |c is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "ord", "candidates" : [ "(Cool $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "ords", "candidates" : [ "(Cool $s)", "(Str $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "pack", "candidates" : [ "(Str $template, *@items)", "(@template, *@items)" ], "file" : "SETTING::src/core/Buf.pm", "type" : "Sub" }, { "name" : "pair", "candidates" : [ "(Mu $key, \\value)" ], "file" : "SETTING::src/core/Pair.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "pairs", "candidates" : [ "($x)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "parse-base", "candidates" : [ "(Str:D $str, Int:D $radix)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub" }, { "name" : "permutations", "candidates" : [ "($n)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "pick", "candidates" : [ "($n, + is raw)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "pop", "candidates" : [ "(@a)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "postcircumfix:<[ ]>", "candidates" : [ "(\\SELF, Any:U $type, |c is raw)", "(\\SELF, int $pos)", "(\\SELF, int $pos, Mu \\assignee)", "(\\SELF, int $pos, Mu :$BIND! is raw)", "(\\SELF, int $pos, :$delete!, *%other)", "(\\SELF, int $pos, :$exists!, *%other)", "(\\SELF, int $pos, :$kv!, *%other)", "(\\SELF, int $pos, :$p!, *%other)", "(\\SELF, int $pos, :$k!, *%other)", "(\\SELF, int $pos, :$v!, *%other)", "(\\SELF, Int:D $pos)", "(\\SELF, Int:D $pos, Mu \\assignee)", "(\\SELF, Int:D $pos, Mu :$BIND! is raw)", "(\\SELF, Int:D $pos, :$delete!, *%other)", "(\\SELF, Int:D $pos, :$exists!, *%other)", "(\\SELF, Int:D $pos, :$kv!, *%other)", "(\\SELF, Int:D $pos, :$p!, *%other)", "(\\SELF, Int:D $pos, :$k!, *%other)", "(\\SELF, Int:D $pos, :$v!, *%other)", "(\\SELF, Any:D \\pos)", "(\\SELF, Any:D \\pos, Mu \\assignee)", "(\\SELF, Any:D \\pos, Mu :$BIND! is raw)", "(\\SELF, Any:D \\pos, :$delete!, *%other)", "(\\SELF, Any:D \\pos, :$exists!, *%other)", "(\\SELF, Any:D \\pos, :$kv!, *%other)", "(\\SELF, Any:D \\pos, :$p!, *%other)", "(\\SELF, Any:D \\pos, :$k!, *%other)", "(\\SELF, Any:D \\pos, :$v!, *%other)", "(\\SELF, Iterable:D \\pos)", "(\\SELF, Iterable:D \\pos, Mu \\val)", "(\\SELF, Iterable:D \\pos, :$BIND!)", "(\\SELF, Iterable:D \\pos, :$delete!, *%other)", "(\\SELF, Iterable:D \\pos, :$exists!, *%other)", "(\\SELF, Iterable:D \\pos, :$kv!, *%other)", "(\\SELF, Iterable:D \\pos, :$p!, *%other)", "(\\SELF, Iterable:D \\pos, :$k!, *%other)", "(\\SELF, Iterable:D \\pos, :$v!, *%other)", "(\\SELF, Callable:D $block)", "(\\SELF, Callable:D $block, Mu \\assignee)", "(\\SELF, Callable:D $block, :$BIND!)", "(\\SELF, Callable:D $block, :$delete!, *%other)", "(\\SELF, Callable:D $block, :$exists!, *%other)", "(\\SELF, Callable:D $block, :$kv!, *%other)", "(\\SELF, Callable:D $block, :$p!, *%other)", "(\\SELF, Callable:D $block, :$k!, *%other)", "(\\SELF, Callable:D $block, :$v!, *%other)", "(\\SELF, Whatever:D)", "(\\SELF, Whatever:D, Mu \\assignee)", "(\\SELF, Whatever:D, :$BIND!)", "(\\SELF, Whatever:D, :$delete!, *%other)", "(\\SELF, Whatever:D, :$exists!, *%other)", "(\\SELF, Whatever:D, :$kv!, *%other)", "(\\SELF, Whatever:D, :$p!, *%other)", "(\\SELF, Whatever:D, :$k!, *%other)", "(\\SELF, Whatever:D, :$v!, *%other)", "(\\SELF, HyperWhatever:D, *%adv)", "(\\SELF, HyperWhatever:D, Mu \\assignee)", "(\\SELF, :$BIND!)", "(\\SELF, :$delete!, *%other)", "(\\SELF, :$exists!, *%other)", "(\\SELF, :$kv!, *%other)", "(\\SELF, :$p!, *%other)", "(\\SELF, :$k!, *%other)", "(\\SELF, :$v!, *%other)", "(\\SELF, *%other)" ], "file" : "SETTING::src/core/array_slice.pm", "type" : "Sub+{<anon|51208992>}+{Precedence}+{<anon|51208992>}" }, { "name" : "postcircumfix:<[; ]>", "candidates" : [ "(\\SELF, @indices)", "(\\SELF, @indices, Mu \\assignee)", "(\\SELF, @indices, :$BIND!)", "(\\SELF, @indices, :$delete!)", "(\\SELF, @indices, :$exists!)", "(\\SELF, @indices, :$kv!)", "(\\SELF, @indices, :$p!)", "(\\SELF, @indices, :$k!)", "(\\SELF, @indices, :$v!)" ], "file" : "SETTING::src/core/multidim_slice.pm", "type" : "Sub+{<anon|51208992>}" }, { "name" : "postcircumfix:<{ }>", "candidates" : [ "(\\SELF, \\key)", "(\\SELF, \\key, Mu \\ASSIGN)", "(\\SELF, \\key, Mu :$BIND! is raw)", "(\\SELF, \\key, :$delete!, *%other)", "(\\SELF, \\key, :$exists!, *%other)", "(\\SELF, \\key, :$kv!, *%other)", "(\\SELF, \\key, :$p!, *%other)", "(\\SELF, \\key, :$k!, *%other)", "(\\SELF, \\key, :$v!, *%other)", "(\\SELF, Iterable \\key)", "(\\SELF, Iterable \\key, Mu \\ASSIGN)", "(\\SELF, Iterable \\key, :$BIND!)", "(\\SELF, Iterable \\key, :$delete!, *%other)", "(\\SELF, Iterable \\key, :$exists!, *%other)", "(\\SELF, Iterable \\key, :$kv!, *%other)", "(\\SELF, Iterable \\key, :$p!, *%other)", "(\\SELF, Iterable \\key, :$k!, *%other)", "(\\SELF, Iterable \\key, :$v!, *%other)", "(\\SELF, Whatever)", "(\\SELF, Whatever, Mu \\ASSIGN)", "(\\SELF, Whatever, :$BIND!)", "(\\SELF, Whatever, :$delete!, *%other)", "(\\SELF, Whatever, :$exists!, *%other)", "(\\SELF, Whatever, :$kv!, *%other)", "(\\SELF, Whatever, :$p!, *%other)", "(\\SELF, Whatever, :$k!, *%other)", "(\\SELF, Whatever, :$p!, *%other)", "(\\SELF, Whatever, :$v!, *%other)", "(\\SELF, :$BIND!)", "(\\SELF, :$delete!, *%other)", "(\\SELF, :$exists!, *%other)", "(\\SELF, :$kv!, *%other)", "(\\SELF, :$p!, *%other)", "(\\SELF, :$k!, *%other)", "(\\SELF, :$p!, *%other)", "(\\SELF, :$v!, *%other)", "(\\SELF, *%other)", "(Perl $d, Str $ where { ... })" ], "file" : "SETTING::src/core/hash_slice.pm", "type" : "Sub+{<anon|51208992>}+{Precedence}+{<anon|51208992>}" }, { "name" : "postcircumfix:<{; }>", "candidates" : [ "(\\SELF, @indices)", "(\\SELF, @indices, :$exists!)" ], "file" : "SETTING::src/core/hash_slice.pm", "type" : "Sub+{<anon|51208992>}" }, { "name" : "postfix:<++>", "candidates" : [ "(Mu:D $a is rw)", "(Mu:U $a is rw)", "(Int:D $a is rw)", "(int $a is rw)", "(Bool:U $a is rw)", "(Bool:D $a is rw)", "(Num:D $a is rw)", "(Num:U $a is rw)", "(num $a is rw --> num)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{Precedence}" }, { "name" : "postfix:<-->", "candidates" : [ "(Mu:D $a is rw)", "(Mu:U $a is rw)", "(Int:D $a is rw)", "(int $a is rw)", "(Bool:U $a is rw)", "(Bool:D $a is rw)", "(Num:D $a is rw)", "(Num:U $a is rw)", "(num $a is rw --> num)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{Precedence}" }, { "name" : "postfix:<i>", "candidates" : [ "(Real \\a --> Complex:D)", "(Complex:D \\a --> Complex:D)", "(Numeric \\a --> Complex:D)", "(Cool \\a --> Complex:D)" ], "file" : "SETTING::src/core/Complex.pm", "type" : "Sub+{Callable[Complex:D]}+{<anon|51208720>}+{Precedence}" }, { "name" : "postfix:<\u207f>", "candidates" : [ "(\\a, \\b)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "prefix:<!>", "candidates" : [ "(Bool \\a)", "(Mu \\a)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<++>", "candidates" : [ "(Mu:D $a is rw)", "(Mu:U $a is rw)", "(Int:D $a is rw)", "(int $a is rw)", "(Bool $a is rw)", "(Num:D $a is rw)", "(Num:U $a is rw)", "(num $a is rw --> num)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{Precedence}" }, { "name" : "prefix:<+>", "candidates" : [ "(\\a)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<+^>", "candidates" : [ "($x)", "(Int:D \\a)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<-->", "candidates" : [ "(Mu:D $a is rw)", "(Mu:U $a is rw)", "(Int:D $a is rw)", "(int $a is rw)", "(Bool $a is rw)", "(Num:D $a is rw)", "(Num:U $a is rw)", "(num $a is rw --> num)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub+{Precedence}" }, { "name" : "prefix:<->", "candidates" : [ "(\\a)", "(Real:D \\a)", "(Int:D \\a --> Int)", "(int $a --> int)", "(Num:D \\a)", "(num $a --> num)", "(Rat:D \\a)", "(FatRat:D \\a)", "(Complex:D \\a --> Complex:D)", "(Duration:D $a)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<?>", "candidates" : [ "(Bool:D \\a)", "(Bool:U \\a)", "(Mu \\a)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<?^>", "candidates" : [ "(Mu \\a)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<^>", "candidates" : [ "($max)" ], "file" : "SETTING::src/core/Range.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<let>", "candidates" : [ "(\\cont)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "prefix:<not>", "candidates" : [ "(Bool \\a)", "(Mu \\a)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<so>", "candidates" : [ "(Bool:D \\a)", "(Bool:U \\a)", "(Mu \\a)" ], "file" : "SETTING::src/core/Bool.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<temp>", "candidates" : [ "(\\cont)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "prefix:<|>", "candidates" : [ "(\\x)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub+{Precedence}" }, { "name" : "prefix:<~>", "candidates" : [ "(\\a)", "(int $a)", "(num $a)", "(Str:D \\a)", "(str $a --> str)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<~^>", "candidates" : [ "(\\a)", "(Blob:D \\a)", "(Str \\a)" ], "file" : "SETTING::src/core/Stringy.pm", "type" : "Sub+{<anon|51208720>}+{Precedence}" }, { "name" : "prefix:<\u2212>", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "prepend", "candidates" : [ "(\\a, |elems is raw)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "print", "candidates" : [ "(Str:D \\x)", "(\\x)", "(**@args is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "printf", "candidates" : [ "(Cool $format, *@args)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "proceed", "candidates" : [ "( --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub+{Callable[Nil]}" }, { "name" : "produce", "candidates" : [ "(&with, + is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "prompt", "candidates" : [ "($msg)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "push", "candidates" : [ "(\\a, |elems is raw)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "put", "candidates" : [ "()", "(Str:D \\x)", "(\\x)", "(**@args is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "rand", "candidates" : [ "( --> Num:D)" ], "file" : "SETTING::src/core/Num.pm", "type" : "Sub+{Callable[Num:D]}" }, { "name" : "redo", "candidates" : [ "( --> Nil)", "(Label:D \\x --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "reduce", "candidates" : [ "(&with, + is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "rename", "candidates" : [ "($from, $to, :$SPEC = { ... }, :$CWD = { ... }, :$createonly)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "repeated", "candidates" : [ "(+ is raw, |c is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "return", "candidates" : [ "( --> Nil)", "(Mu \\x --> Nil)", "(**@x is raw --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "return-rw", "candidates" : [ "( --> Nil)", "(Mu \\x --> Nil)", "(**@x is raw --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "reverse", "candidates" : [ "(@a)", "(+)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "rindex", "candidates" : [ "(Cool $s, Cool $needle, Cool $pos)", "(Cool $s, Cool $needle)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "rmdir", "candidates" : [ "(*@filenames, :$SPEC = { ... }, :$CWD = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "roll", "candidates" : [ "($n, + is raw)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "roots", "candidates" : [ "($x, Cool $n)", "($x, Numeric $n)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "rotate", "candidates" : [ "(@a, Int $n = 1)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "round", "candidates" : [ "($a)", "(Numeric $a)", "(Numeric $a, $scale)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "roundrobin", "candidates" : [ "(+ is raw)" ], "file" : "SETTING::src/core/List.pm", "type" : "Sub" }, { "name" : "run", "candidates" : [ "(*@args (Any $, *@), :$in = \"-\", :$out = \"-\", :$err = \"-\", Bool :$bin, Bool :$chomp = Bool::True, Bool :$merge, Str:D :$enc = \"utf8\", Str:D :$nl = \"\\n\", :$cwd = { ... }, :$env)" ], "file" : "SETTING::src/core/Proc.pm", "type" : "Sub" }, { "name" : "samecase", "candidates" : [ "(Cool $string, Cool $pattern)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "samemark", "candidates" : [ "($s, $pat)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub" }, { "name" : "samewith", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "say", "candidates" : [ "()", "(Str:D \\x)", "(\\x)", "(**@args is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "sec", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "sech", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "set", "candidates" : [ "(*@a --> Set)" ], "file" : "SETTING::src/core/set_operators.pm", "type" : "Sub+{Callable[Set]}" }, { "name" : "shell", "candidates" : [ "($cmd, :$in = \"-\", :$out = \"-\", :$err = \"-\", Bool :$bin, Bool :$chomp = Bool::True, Bool :$merge, Str:D :$enc = \"utf8\", Str:D :$nl = \"\\n\", :$cwd = { ... }, :$env)" ], "file" : "SETTING::src/core/Proc.pm", "type" : "Sub" }, { "name" : "shift", "candidates" : [ "(@a)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "sign", "candidates" : [ "(Numeric \\x)", "(Cool \\x)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "signal", "candidates" : [ "(Signal $signal, *@signals, :$scheduler = { ... })" ], "file" : "SETTING::src/core/signals.pm", "type" : "Sub" }, { "name" : "sin", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "sinh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "sleep", "candidates" : [ "($seconds = Inf --> Nil)" ], "file" : "SETTING::src/core/Date.pm", "type" : "Sub+{Callable[Nil]}" }, { "name" : "sleep-timer", "candidates" : [ "($seconds = Inf --> Duration)" ], "file" : "SETTING::src/core/Date.pm", "type" : "Sub+{Callable[Duration]}" }, { "name" : "sleep-until", "candidates" : [ "($until --> Bool)" ], "file" : "SETTING::src/core/Date.pm", "type" : "Sub+{Callable[Bool]}" }, { "name" : "slip", "candidates" : [ "()", "(@args)", "(+ is raw)" ], "file" : "SETTING::src/core/Slip.pm", "type" : "Sub" }, { "name" : "slurp", "candidates" : [ "(IO::ArgFiles:D $io = { ... }, :$bin, :$enc = \"utf8\", |c is raw)", "(Cool:D $path, :$bin = Bool::False, :$enc = \"utf8\", |c is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "so", "candidates" : [ "(Mu $x)" ], "file" : "SETTING::src/core/Mu.pm", "type" : "Sub" }, { "name" : "sort", "candidates" : [ "(&by, @values)", "(&by, + is raw)", "(@values)", "(+ is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "splice", "candidates" : [ "(@arr, |c is raw)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "split", "candidates" : [ "($pat, Cool $target, |c is raw)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "sprintf", "candidates" : [ "(Cool $format, *@args)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "spurt", "candidates" : [ "(Cool $path, $contents, |c is raw)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "sqrt", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $a --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "squish", "candidates" : [ "(+ is raw, |c is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "srand", "candidates" : [ "(Int $seed --> Int:D)" ], "file" : "SETTING::src/core/Num.pm", "type" : "Sub+{Callable[Int:D]}" }, { "name" : "subbuf-rw", "candidates" : [ "(Buf:D \\b, $from = 0, $elems = { ... })" ], "file" : "SETTING::src/core/Buf.pm", "type" : "Sub" }, { "name" : "substr", "candidates" : [ "(Str:D \\what, Int:D \\start)", "(Str:D \\what, Callable:D \\start)", "(Str:D \\what, Int:D \\start, Int:D \\want)", "($what, \\start, $want?)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub" }, { "name" : "substr-rw", "candidates" : [ "(\\what, \\start, $want?)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub" }, { "name" : "succeed", "candidates" : [ "( --> Nil)", "(\\x --> Nil)", "(| is raw --> Nil)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "sum", "candidates" : [ "()", "(\\SELF)", "(+ is raw)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "symlink", "candidates" : [ "($target, $name, :$SPEC = { ... }, :$CWD = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "take", "candidates" : [ "()", "(\\x)", "(| is raw)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "take-rw", "candidates" : [ "()", "(\\x)", "(| is raw)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "tan", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "tanh", "candidates" : [ "(Numeric \\x)", "(Cool \\x)", "(num $x --> num)" ], "file" : "SETTING::src/core/Numeric.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "tc", "candidates" : [ "(Cool $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "tclc", "candidates" : [ "(Cool $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "term:<now>", "candidates" : [ "()" ], "file" : "SETTING::src/core/Instant.pm", "type" : "Sub" }, { "name" : "term:<time>", "candidates" : [ "()" ], "file" : "SETTING::src/core/Instant.pm", "type" : "Sub" }, { "name" : "tmpdir", "candidates" : [ "($path, :$test = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "to-json", "candidates" : [ "(|c is raw)" ], "file" : "SETTING::src/core/JSON/Pretty.pm", "type" : "Sub" }, { "name" : "trait_mod:<does>", "candidates" : [ "(Mu:U $doee, Mu:U $role)", "(Variable:D $v, Mu:U $role)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<handles>", "candidates" : [ "(Attribute:D $target, $thunk)", "(Method:D $m, &thunk)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<hides>", "candidates" : [ "(Mu:U $child, Mu:U $parent)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<is>", "candidates" : [ "(Mu:U $child, Mu:U $parent)", "(Mu:U $child, :$DEPRECATED!)", "(Mu:U $type, :$rw!)", "(Mu:U $type, :$nativesize!)", "(Mu:U $type, :$ctype!)", "(Mu:U $type, :$unsigned!)", "(Mu:U $type, :$hidden!)", "(Mu:U $type, Mu :$array_type!)", "(Mu:U $type, *%fail)", "(Attribute:D $attr, |c is raw)", "(Attribute:D $attr, :$rw!)", "(Attribute:D $attr, :$readonly!)", "(Attribute $attr, :$required!)", "(Attribute $attr, :$default!)", "(Attribute:D $attr, :$box_target!)", "(Attribute:D $attr, :$DEPRECATED!)", "(Attribute:D $attr, :$leading_docs!)", "(Attribute:D $attr, :$trailing_docs!)", "(Routine:D $r, |c is raw)", "(Routine:D $r, :$rw!)", "(Routine:D $r, :$raw!)", "(Routine:D $r, :$default!)", "(Routine:D $r, :$DEPRECATED!)", "(Routine:D $r, Mu :$inlinable!)", "(Routine:D $r, :$onlystar!)", "(Routine:D $r, :prec(%spec)!)", "(Routine $r, :&equiv!)", "(Routine $r, :&tighter!)", "(Routine $r, :&looser!)", "(Routine $r, :$assoc!)", "(Parameter:D $param, |c is raw)", "(Parameter:D $param, :$readonly!)", "(Parameter:D $param, :$rw!)", "(Parameter:D $param, :$copy!)", "(Parameter:D $param, :$required!)", "(Parameter:D $param, :$raw!)", "(Parameter:D $param, :$onearg!)", "(Parameter:D $param, :$leading_docs!)", "(Parameter:D $param, :$trailing_docs!)", "(Routine:D \\r, :$export!)", "(Mu:U \\type, :$export!)", "(Mu \\sym, :$export!, :$SYMBOL!)", "(Block:D $r, :$leading_docs!)", "(Block:D $r, :$trailing_docs!)", "(Routine:D $r, :$leading_docs!)", "(Routine:D $r, :$trailing_docs!)", "(Mu:U $docee, :$leading_docs!)", "(Mu:U $docee, :$trailing_docs!)", "(Routine:D $r, :$hidden-from-backtrace!)", "(Routine:D $r, :$hidden-from-USAGE!)", "(Routine:D $r, :$pure!)", "(Routine:D $r, :$nodal!)", "(Variable:D $v, |c is raw)", "(Variable:D $v, Mu :$default!)", "(Variable:D $v, :$dynamic!)", "(Variable:D $v, :$export!)", "(Routine $r, Str :$equiv!)", "(Routine $r, Str :$tighter!)", "(Routine $r, Str :$looser!)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<of>", "candidates" : [ "(Mu:U $target, Mu:U $type)", "(Routine:D $target, Mu:U $type)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<returns>", "candidates" : [ "(Routine:D $target, Mu:U $type)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<trusts>", "candidates" : [ "(Mu:U $truster, Mu:U $trustee)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trait_mod:<will>", "candidates" : [ "(Attribute:D $attr, |c is raw)", "(Attribute $attr, Block :$build!)", "(Variable:D $v, $block, |c is raw)", "(Variable:D $v, $block, :$begin!)", "(Variable:D $v, $block, :$check!)", "(Variable:D $v, $block, :$final!)", "(Variable:D $v, $block, :$init!)", "(Variable:D $v, $block, :$end!)", "(Variable:D $v, $block, :$enter!)", "(Variable:D $v, $block, :$leave!)", "(Variable:D $v, $block, :$keep!)", "(Variable:D $v, $block, :$undo!)", "(Variable:D $v, $block, :$first!)", "(Variable:D $v, $block, :$next!)", "(Variable:D $v, $block, :$last!)", "(Variable:D $v, $block, :$pre!)", "(Variable:D $v, $block, :$post!)", "(Variable:D $v, $block, :$compose!)" ], "file" : "SETTING::src/core/traits.pm", "type" : "Sub" }, { "name" : "trim", "candidates" : [ "(Str:D $s --> Str:D)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub+{Callable[Str:D]}" }, { "name" : "trim-leading", "candidates" : [ "(Str:D $s --> Str:D)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub+{Callable[Str:D]}" }, { "name" : "trim-trailing", "candidates" : [ "(Str:D $s --> Str:D)" ], "file" : "SETTING::src/core/Str.pm", "type" : "Sub+{Callable[Str:D]}" }, { "name" : "truncate", "candidates" : [ "(Real:D $x)", "(Cool:D $x)" ], "file" : "SETTING::src/core/Real.pm", "type" : "Sub" }, { "name" : "uc", "candidates" : [ "(Cool $s)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "undefine", "candidates" : [ "(Mu \\x)", "(Array \\x)", "(Hash \\x)" ], "file" : "SETTING::src/core/operators.pm", "type" : "Sub" }, { "name" : "unimatch", "candidates" : [ "(Str:D $str, |c is raw)", "(Int:D $code, Stringy:D $pvalname, Stringy:D $propname)", "(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = { ... })" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uniname", "candidates" : [ "(Str:D $str)", "(Int:D $code)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uninames", "candidates" : [ "(Str:D $str)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uniprop", "candidates" : [ "(Str:D $str, |c is raw)", "(Int:D $code)", "(Int:D $code, Stringy:D $propname)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uniprop-bool", "candidates" : [ "(Str:D $str, Stringy:D $propname)", "(Int:D $code, Stringy:D $propname)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uniprop-int", "candidates" : [ "(Str:D $str, Stringy:D $propname)", "(Int:D $code, Stringy:D $propname)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uniprop-str", "candidates" : [ "(Str:D $str, Stringy:D $propname)", "(Int:D $code, Stringy:D $propname)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "uniprops", "candidates" : [ "(Str:D $str, Stringy:D $propname = \"General_Category\")" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "unique", "candidates" : [ "(+ is raw, |c is raw)" ], "file" : "SETTING::src/core/Any-iterable-methods.pm", "type" : "Sub" }, { "name" : "unival", "candidates" : [ "(Str:D $str)", "(Int:D $code)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "univals", "candidates" : [ "(Str:D $str)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub" }, { "name" : "unlink", "candidates" : [ "(*@filenames, :$SPEC = { ... }, :$CWD = { ... })" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" }, { "name" : "unpolar", "candidates" : [ "(Real $mag, Real $angle)" ], "file" : "SETTING::src/core/Real.pm", "type" : "Sub" }, { "name" : "unshift", "candidates" : [ "(\\a, |elems is raw)" ], "file" : "SETTING::src/core/array_operators.pm", "type" : "Sub" }, { "name" : "val", "candidates" : [ "(*@maybevals)", "(Mu)", "(Slip:D $maybevals)", "(Pair:D \\ww-thing)", "(\\one-thing)", "(Str:D $MAYBEVAL, :$val-or-fail)" ], "file" : "SETTING::src/core/allomorphs.pm", "type" : "Sub" }, { "name" : "values", "candidates" : [ "($x)" ], "file" : "SETTING::src/core/Any.pm", "type" : "Sub" }, { "name" : "warn", "candidates" : [ "(*@msg)" ], "file" : "SETTING::src/core/control.pm", "type" : "Sub" }, { "name" : "wordcase", "candidates" : [ "(Str:D $x)", "(Cool $x)" ], "file" : "SETTING::src/core/Cool.pm", "type" : "Sub+{<anon|51208720>}" }, { "name" : "words", "candidates" : [ "($what, $limit = Inf, *%named)" ], "file" : "SETTING::src/core/io_operators.pm", "type" : "Sub" } ], "made-on" : "2017-02-13T11:43:33.749231-05:00" }